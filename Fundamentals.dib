#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!markdown

# Table of Contents

- [Table of Contents](#table-of-contents)
- [What is PowerShell?](#what-is-powershell)
    - [What is .NET?](#what-is-net)
    - [First PowerShell Script](#first-powershell-script)
- [First PowerShell Script](#first-powershell-script)
    - [Syntax](#syntax)
- [Get Help](#get-help)
    - [Interpreting The Help](#interpreting-the-help)
    - [Common Parameters](#common-parameters)

#!markdown

# What is PowerShell?

`PowerShell` is a task automation and configuration management framework from Microsoft, consisting of a command-line shell and associated scripting language built on the `.NET Framework`. PowerShell is intended to be a cross-platform (Windows, Linux, and macOS) shell and scripting language. PowerShell is built on the .NET Framework, allowing you to leverage .NET as well as PowerShell to automate tasks on any platform where .NET Core or PowerShell is available.

#!markdown

## What is .NET?

`.NET` is a free, cross-platform, open source developer platform for building many different types of applications. With .NET, you can use multiple languages, editors, and libraries to build for web, mobile, desktop, games, and IoT. .NET is composed of two parts: `.NET Framework` and `.NET Core`. The .NET Framework is a Windows-only implementation of .NET. The .NET Core is a cross-platform implementation of .NET that runs on Windows, macOS, and Linux. .NET consists of the following components:

- .NET Language - Programming language like C#, F#, and Visual Basic to write source code
- .NET Compiler - Roslyn to compile source code into Intermediate Language (IL)
- .NET Assembly - IL files are compiled into assemblies (DLLs or EXEs) that can be executed
- .NET Runtime - Common Language Runtime (CLR) is used to execute assemblies
- .NET Class Library - a collection of classes and methods that can be used to build applications
- .NET Framework - a collection of assemblies that are used to build applications

#!markdown

## First PowerShell Script

Write your first `PowerShell` script! It outputs a string to the console.

> Hover your mouse over the following code. On the left side, a little `play` icon should show up. Click that and the code will run!

#!pwsh

$my_str = "Hello world"
Write-Host $my_str
# Write-Host is not needed, but it's a good practice to use it

#!markdown

NOTE: If above doesn't work then make sure you have `.Net 7` and `PowerShell 7` installed on your machine.

You can run `dotnet --list-sdks` and `$PSVersionTable` in your terminal to check if you have the correct versions installed.

#!markdown

## Syntax

- `PowerShell` is case-insensitive and follow similar syntax to C#
- PowerShell does not care if you use `/` or `\` as the directory separator
- Use a backtick(`` ` ``) to continue a command on the next line
- Use a semicolon(`;`) to separate commands on the same line
- To declare a comment, use a number sign(`#`)
- To be continued...

#!markdown

# Get Help

PowerShell has a fantastic help system. You can get help on any command by using the `Get-Help` command. For example, to get help on the `Write-Host` command, you can run the following command:

#!pwsh

Get-Help Write-Host

#!markdown

You can also use wild cards(`*`) and the alias `help` or `man` as a substitute for `Get-Help`. 

Add the parameter:
+ `-Full` to get the full help guide
+ `-Examples` to get examples of how to use the command
+ `-Online` to get the online help guide which are more up to date

Examples:

#!pwsh

help *write*
#man Write-Host -Full
#Get-Help Write-Host -Examples
#get-help write-host -online

#!markdown

> Update `Get-Help` by running `Update-Help`

#!markdown

## Interpreting The Help

What use is the help system if you do not know how to read it properly. Let's learn how to understand what you're looking at. Run the code below and take a look at the *syntax* row.

#!pwsh

get-help get-item

#!markdown

Notice in the **syntax** row that it is listed twice - which means that the command supports two parameter sets. Depending on what parameters are passed in then the command will act differently. At least one unique parameter exists in the parameter set.

You do not need to use every single parameter in order to make the command to run. Optional parameters are in square brackets `[]` while mandatory parameters are not. Notice that the parameter set also indicates what kind of input each accept like `System.String` and `Int`.

#!markdown

## Common Parameters

All PowerShell commands have a set of common parameters that you can use to customize the behavior of the command. Access the parameters by running `Help *common*`:

- Verbose
- Debug
- WarningAction
- WarningVariable
- ErrorAction
- ErrorVariable
- OutVariable
- OutBuffer
- InformationAction
- InformationVariable
- PipelineVariable
